/**
 * @constructor
 */
shortener.PageManagerView = function(viewElement, urlToShortenField,
    outputUrlField, shortenButton)  {
  /** @const */ this.viewElement = viewElement;
  /** @const */ this.urlToShortenField = urlToShortenField;
  /** @const */ this.outputUrlField = outputUrlField;
  /** @const */ this.shortenButton = shortenButton;
};

shortener.PageManagerView.prototype.attachTo = function(parentElement) {
  parentElement.append(this.viewElement);
};

shortener.PageManagerView.prototype.submitClickEvent = function(handler) {
  /** @const */ var self = this;
  this.shortenButton.bind('click', function(event) {
    /** @const */ var urlToShorten = self.urlToShortenField.val();
    /** @const */ var outputUrl = self.outputUrlField.val();
    handler(urlToShorten, outputUrl);
  });
};

shortener.PageManagerView.of = function(pagesAsJson) {
  return new shortener.PageManagerView.Builder().
      urlToShortenField().
      outputUrlField().
      shortenButton().
      of(pagesAsJson).
      build();
};

/**
 * @constructor
 */
shortener.PageManagerView.Builder = function() {
  /** @const */ this.viewElement = $('<div>');
  /** @const */ this.viewList = $('<ul>');
  this.urlToShortenFieldElement = null;
  this.outputUrlFieldElement = null;
  this.shortenButtonElement = null;
};

shortener.PageManagerView.Builder.prototype.urlToShortenField = function() {
  /** @const */ var urlToShortenLabel = $('<label>', {
    'for': 'urlToShorten',
    html: 'Shorten'
  });
  this.urlToShortenFieldElement = $('<input>', {
    type: 'text',
    name: 'urlToShorten',
    value: ''
  });
  this.viewElement.append(urlToShortenLabel).
      append(this.urlToShortenFieldElement);
  return this;
};

shortener.PageManagerView.Builder.prototype.outputUrlField = function() {
  /** @const */ var outputLabel = $('<label>', {
    'for': 'outputUrl',
    html: 'to (leave blank for autogenerated URL)'
  });
  this.outputUrlFieldElement = $('<input>', {
    type: 'text',
    name: 'outputUrl',
    value: ''
  });
  this.viewElement.append(outputLabel).append(this.outputUrlFieldElement);
  return this;
};

shortener.PageManagerView.Builder.prototype.shortenButton = function() {
  this.shortenButtonElement = $('<input>', {
    type: 'button',
    name: 'submit',
    value: 'Shorten'
  });
  this.viewElement.append(this.shortenButtonElement);
  return this;
};

shortener.PageManagerView.Builder.prototype.of = function(pagesAsJson) {
  /** @const */ var viewList = this.viewList;
  _(pagesAsJson).each(function(pageAsJson) {
    /** @const */ var pageListItem = $('<li>');
    /** @const */ var originalUrlAnchor = $('<a>', {
      href: pageAsJson.originalUrl, 
      html: pageAsJson.originalUrl
    });
    /** @const */ var shortenedUrlAnchor = $('<a>', {
      href: pageAsJson.shortenedUrl,
      html: pageAsJson.shortenedUrl
    });
    /** @const */ var numberOfAnalytics = $('<span>', {
      // TODO Allow users to see details about analytics.
      html: pageAsJson.visits.length
    });
    pageListItem.append(originalUrlAnchor).append(shortenedUrlAnchor).
        append(numberOfAnalytics);
    viewList.append(pageListItem);
  });
  return this;
};

shortener.PageManagerView.Builder.prototype.build = function() {
  this.viewElement.append(this.viewList);
  return new shortener.PageManagerView(this.viewElement,
      this.urlToShortenFieldElement, this.outputUrlFieldElement,
      this.shortenButtonElement);
};
